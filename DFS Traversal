void dfs(vector<int> adj[],vector<int>& vis,int i,vector<int>& vec)
{
    vec.push_back(i);
    vis[i]=1;
    for(auto x: adj[i])
    {
        if(vis[x]==0)
        {
            dfs(adj,vis,x,vec);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<int> adj[V];
    for(int i=0;i<E;i++)
    {
        adj[edges[i][0]].push_back(edges[i][1]);
        adj[edges[i][1]].push_back(edges[i][0]);
    }
    
    vector<vector<int> > ans;
    vector<int> visited(V,0);
    for(int i=0;i<V;i++)
    {
        vector<int> vec;
        if(visited[i]==0)
        {
            dfs(adj,visited,i,vec);
        }
        if(vec.size()!=0)
        {
            sort(vec.begin(),vec.end());
            ans.push_back(vec);
         }
    }
    return ans;
}
