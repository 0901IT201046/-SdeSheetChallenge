/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

void Inorder(BinaryTreeNode<int>*root,vector<int>&ino)
{
   if(root==NULL) return ;
   Inorder(root->left,ino);
   ino.push_back(root->data);
   Inorder(root->right,ino);
   
}
void preorder(BinaryTreeNode<int>*root,vector<int>&pre)
{
    if(root==NULL) return ;
     pre.push_back(root->data);
   preorder(root->left,pre);
   preorder(root->right,pre);
}
void postorder(BinaryTreeNode<int>*root,vector<int>&post)
{
   if(root==NULL) return ;
   postorder(root->left,post);
   postorder(root->right,post);
   post.push_back(root->data);
}
vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
   vector<int>ino;
   Inorder(root,ino);
   vector<int>pre;
   vector<int>post;
   preorder(root,pre);
   postorder(root,post);
   vector<vector<int>>ans;
   ans.push_back(ino);
   ans.push_back(pre);
   ans.push_back(post);
   return ans;
}
